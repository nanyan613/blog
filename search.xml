<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Matery主题添加Artitalk</title>
      <link href="/post/879a.html"/>
      <url>/post/879a.html</url>
      
        <content type="html"><![CDATA[<h1 id="Matery主题添加Artitalk"><a href="#Matery主题添加Artitalk" class="headerlink" title="Matery主题添加Artitalk"></a>Matery主题添加Artitalk</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先上链接，这是我的说说界面：<a href="https://www.yelow.ga/shuoshuo/">闲言碎语</a></p><p>有时候啊，hexo想发说说/微语总是有点麻烦，这时候Artitalk出现了。</p><h1 id="安装Artitalk"><a href="#安装Artitalk" class="headerlink" title="安装Artitalk"></a>安装Artitalk</h1><p>Matery主题没有自带Artitalk集成，所以要自己安装。</p><p>先生成一个说说的页面：</p><pre class="line-numbers language-bash"><code class="language-bash">hexo new page <span class="token string">"shuoshuo"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在<code>blog/source/</code>下面出现了<code>shuoshuo</code>这个文件夹，里面有一个<code>index.md</code>文件。</p><p>打开这个文件，现在里面是这样的：</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: shuoshuodate: 2020-06-05 11:15:37type: shuoshuo\-\-\-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>Front-Matery</code>改成这样：</p><pre class="line-numbers language-markdown"><code class="language-markdown"><span class="token hr punctuation">---</span>title: 闲言date: 2020-06-05 11:15:37type: "shuoshuo"\-\-\-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然<code>title</code>你可以自定义哦</p><p>之前真的很头疼，<code>Artitalk</code>和<code>Valine</code>不能同时使用，因为两者的后台都是基于<code>LeanClou</code>d的，所以不能一起使用。我也曾因此放弃过搭建说说。</p><p>我也试过在<code>Front-Matter</code>里添加<code>comments: &#39;false&#39;</code>，但是这个方法仅适用于<code>Butterfly</code>主题，<code>Matery</code>主题没有这个配置。</p><p>但是前几天看到<code>Artitalk</code>官方的文档说解决了这个问题，我就再次尝试了。</p><p>和<code>Valine</code>一样，打开<code>LeanCloud</code>之后创建应用，之后我借用一下<code>Artitalk.js</code>的官方文档。</p><ol><li><p>绑定完成之后点击创建应用，应用名称随意，接着在结构化数据中创建<code>class</code>，命名为<code>shuoshuo</code>。</p></li><li><p>在你新建的应用中找到结构化数据下的用户。点击<code>添加用户</code>，输入想用的用户名及密码。</p></li><li><p>回到结构化数据中，点击<code>class</code>下的<code>shuoshuo</code>。找到<code>权限</code>，在<code>Class</code>访问权限中将<code>add_fields</code>以及<code>create</code>权限设置为指定用户，输入你刚才输入的用户名会自动匹配。为了安全起见，将<code>delete</code>和<code>update</code>也设置为跟它们一样的权限。</p></li><li><p>点击<code>class</code>下的<code>_User</code>添加列，列名称为<code>img</code>，默认值填上你这个账号想要用的头像url，这一项不进行配置，说说头像会显示为默认头像——Artitalk的logo。</p></li><li><p>在最菜单栏中找到<code>设置</code>-&gt;<code>应用keys</code>，记下来<code>AppID</code>和<code>AppKey</code>，一会会用。</p></li><li><p>最后将<code>_User</code>中的权限全部调为指定用户，或者数据创建者，为了保证不被篡改用户数据已达到强制发布说说。</p></li><li><p>因为<code>leancloud</code>功能的限制。若想同时使用<code>valine</code>和<code>artitalk</code>，请在<code>class</code>中添加名为<code>Comment</code>的<code>class</code>。不推荐在存储<code>valine</code>的应用中新建名为<code>shuoshuo</code>的<code>class</code>，可能会出现神奇的bug。</p></li></ol><p>之后在<code>shuoshuo</code>的<code>index.md</code>里添加如下代码：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://libs.baidu.com/jquery/2.0.0/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span>    var appID=""; <span class="token comment" spellcheck="true">&lt;!--这里填写刚刚获取的appID--></span>    var appKEY=""; <span class="token comment" spellcheck="true">&lt;!--这里填写刚刚获取的appKEY--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>artitalk_main<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://unpkg.com/artitalk<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果出现特殊情况，我这里不一一解释/*其实我也不懂emmmm*/。最好是查看<code>Artitalk.js</code>的官方文档==&gt;<a href="https://artitalk.js.org/faq.html#🔨-常见问题" target="_blank" rel="noopener">传送门</a></p><p>还有哈，有一些自定义功能可以到<code>Artitalk.js</code>的官方文档里查看，在这里==&gt;<a href="https://artitalk.js.org/settings.html#必填" target="_blank" rel="noopener">传送门</a></p><p>但是<code>Artitalk</code>仍然不能使用。</p><h1 id="更新Valine"><a href="#更新Valine" class="headerlink" title="更新Valine"></a>更新Valine</h1><p>Artitalk的大佬说了，<code>Valine</code>里面的<code>av-min.js</code>干扰了<code>Artitalk</code>。而v1.4.x版的<code>Valine</code>可以不需要<code>av-min.js</code>。于是我得把<code>Valine</code>升级一下。</p><p>由于<code>Valine</code>是集成在<code>Matery</code>主题里的，所以升级可折腾死我了。</p><p>到Github上找到<code>Valine</code>：<a href="https://github.com/xCss/Valine" target="_blank" rel="noopener">传送门</a></p><p>复制https的Git地址，到<a href="http://g.widyun.com/" target="_blank" rel="noopener">GitHub代下载服务</a>快速下载//真的没有打广告</p><p>然后解压，在<code>dist</code>文件夹里找到<code>Valine.min.js</code>，复制并替换blog\themes\matery\source\libs\valine里面的<code>Valine.min.js</code></p><p>并删除<code>av-min.js</code>，然后<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>。查看的地址是 [https://{you blog’s site}/shuoshuo](https://{you blog’s site}/shuoshuo)</p><p>以下是我的效果图，但是我觉得这个样子很难看，这些画红框框的地方我不喜欢。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710130542.png" alt=""></p><p>更不能忍受的是，最下面的文章跳转吧我的appID和appKey给泄露了。不但不美观，还有点危险。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710131031.png" alt=""></p><h1 id="优化说说界面"><a href="#优化说说界面" class="headerlink" title="优化说说界面"></a>优化说说界面</h1><p>我再想了一下，由于我没有给<code>shuoshuo</code>定义页面，所以它就按照<code>post</code>的样式来了。</p><p>在<code>Front-Matter</code>里加上这个一行：</p><pre class="line-numbers language-markdown"><code class="language-markdown">layout: "shuoshuo"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后在主题文件夹下找到<code>\matery\layout\</code>，在里面新建一个<code>shuoshuo.ejs</code>文件。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token comment" spellcheck="true">/* don't remove. */</span>    <span class="token selector"><span class="token class">.about-cover</span> </span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">75</span>vh<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>&lt;%- partial('_partial/bg-cover') %><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aboutme<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>container about-container<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card-content article-card-content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title center-align<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>zoom-in-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fa fa-comment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">__('闲言碎语')</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>articleContent<span class="token punctuation">"</span></span> <span class="token attr-name">data-aos</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fade-up<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">page.content</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>                 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.gitalk</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.gitalk.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            &lt;%- partial('_partial/gitalk') %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.gitment.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            &lt;%- partial('_partial/gitment') %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.disqus.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            &lt;%- partial('_partial/disqus') %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.livere</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.livere.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            &lt;%- partial('_partial/livere') %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">if</span> <span class="token attr-name">(theme.valine</span> <span class="token attr-name">&amp;&amp;</span> <span class="token attr-name">theme.valine.enable)</span> <span class="token attr-name">{</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            &lt;%- partial('_partial/valine') %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">}</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>这个代码是我从<code>about.ejs</code>里面复制来的，经过删减和添加，可能效果还是不怎么样，但是毕竟算是我捣鼓出来的emmm。有不合理之处请赐教。</p></blockquote><p>最后可以<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>看看，并试着<code>hexo d</code>了。</p><h1 id="且慢！！！"><a href="#且慢！！！" class="headerlink" title="且慢！！！"></a>且慢！！！</h1><p>我忘了一个很重要的事，要在主题文件的_config.yml里添加这么一行：</p><pre class="line-numbers language-yml"><code class="language-yml">  说说:    url: /shuoshuo    icon: fa fa-comment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样才能在顶部菜单栏里看到这个页面。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Matery </tag>
            
            <tag> Artitalk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>获取微软应用程序的API</title>
      <link href="/post/u7r6.html"/>
      <url>/post/u7r6.html</url>
      
        <content type="html"><![CDATA[<h1 id="获取微软应用程序的API"><a href="#获取微软应用程序的API" class="headerlink" title="获取微软应用程序的API"></a>获取微软应用程序的API</h1><p>有时候微软应用程序API获取的时候会抽，半天没反应。</p><p>这时需要手动到Azure获取应用机密和应用ID。</p><p>打开<a href="https://portal.azure.com/" target="_blank" rel="noopener">https://portal.azure.com/</a>，登录你的微软账号。</p><p>登录完成后，可以看到如下界面，选择管理 <code>Azure Active Directory</code> 。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195336.png" alt=""></p><p>选择左边的<code>应用注册</code>，并<code>注册新应用</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195408.png" alt=""></p><p>写好应用名称，方便以后管理应用。并填写URI，以便验证身份后进行重定向。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195430.png" alt=""></p><p>此时，应用程序ID就出现了。就在下图的红框里</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195505.png" alt=""></p><p>现在我们来找<code>应用机密</code>。</p><p>打开左边的<code>证书与密码</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195534.png" alt=""></p><p>新建客户端密码</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195557.png" alt=""></p><p>添加一个说明，便于管理机密，然后酌情选择失效时间。我这里选择了<code>从不</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195617.png" alt=""></p><p>然后<code>应用机密</code>就出现了，右面有个小按钮，可以复制。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200710195642.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微软 </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换设备继续Hexo</title>
      <link href="/post/58.html"/>
      <url>/post/58.html</url>
      
        <content type="html"><![CDATA[<h3 id="一直想写这么一篇博文，但是没有机会写。这次换了设备，于是写了这篇。"><a href="#一直想写这么一篇博文，但是没有机会写。这次换了设备，于是写了这篇。" class="headerlink" title="一直想写这么一篇博文，但是没有机会写。这次换了设备，于是写了这篇。"></a>一直想写这么一篇博文，但是没有机会写。这次换了设备，于是写了这篇。</h3><h1 id="push到代码托管平台"><a href="#push到代码托管平台" class="headerlink" title="push到代码托管平台"></a>push到代码托管平台</h1><blockquote><ul><li>注意* 我这里源文件托管选择了Coding，网站还在Github上。毕竟国内速度好一点。</li></ul><p>还有，这篇文章是写给像我一样的Git小白的。如果是大佬就不用浪费宝贵时间了。如果有什么不对支持，还请提出让我改正。</p></blockquote><h2 id="注册Coding账号"><a href="#注册Coding账号" class="headerlink" title="注册Coding账号"></a>注册Coding账号</h2><p>现在Coding改版了，加了个什么<del>辣鸡</del>团队的东西，有点不舒服。</p><h2 id="push源文件"><a href="#push源文件" class="headerlink" title="push源文件"></a>push源文件</h2><p>先生成ssh文件，以便和git仓库进行同步。</p><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>找到个人文件夹下面的<code>.ssh</code>目录，打开，复制里面的pub公钥。</p><p>Coding主界面右上角个人设置，打开<code>SSH公钥</code>，把复制的pub公钥加进去。</p><p>打开你的Hexo根目录，并右键<code>Git Bash Here</code>，测试你的SSH配置对不对，能不能连接Coding。代码如下：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@git.coding.net<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果连接github地话，使用这个：<a href="mailto:git@github.com">git@github.com</a>。</p><p>出现Hi XXX的情况，配置就对了。fetal的话，就再配置一下哈。</p><p>在Hexo根目录弄一个本地Git仓库：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后目录下面会多出一个隐藏的.git文件夹，这就是仓库，最好别乱动它。</p><p>然后把Hexo根目录加入到本地仓库中：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> add <span class="token keyword">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注意！！！ <code>add</code>后面有一个<code>space</code>和一个点！</p></blockquote><p>这条命令就是把目录下所有的文件（不包括仓库自己哦）添加到仓库里。注意add后面有一空格还有一个点。</p><p>然后注上commit，文件到达暂存区：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> commit -m <span class="token string">"这里想些啥写啥"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后我们连接Coding的仓库：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> remote origin git@git.coding.net/***<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意一下哈，这里的<code>origin</code>是你在<code>GitBash</code>里对这个远程仓库的称呼，可以自己改成喜欢的。如果你已经有<code>origin</code>的仓库了，那么会报错，<code>fetal</code>警告！！这时换一个名字就好了。后面的<code>git@git.coding.net/***</code>就是你仓库的地址，最好ssh的。</p><p>最后，可以push了；</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> push origin master<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>注释：<code>origin</code>就是之前远程仓库的名字。<code>master</code>是远程仓库的分支，如果要其他分支的话，请先创建。</p></blockquote><p>不出意外的话，Coding上已经有本地的文件了。</p><p>不过同步速度还是有点慢。</p><h1 id="排除部分文件的同步"><a href="#排除部分文件的同步" class="headerlink" title="排除部分文件的同步"></a>排除部分文件的同步</h1><p>这时就要用到<code>.gitignore</code>文件了。他能够排除个别文件夹保存到仓库。</p><p>Bash里，输入一下的命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">touch</span> .gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后检查一下根目录，里面会出现<code>.gitignore</code>文件，里面会有一些拒绝提交的文件名称。比如我的里面是这样的：</p><pre class="line-numbers language-gitignore"><code class="language-gitignore">.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/package-lock.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后，删除本地仓库里的文件，再add commit push，一些临时文件就没了。速度也快了。</p><p>今天有点晚了，明天再更新。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发现Gridea这块新大陆</title>
      <link href="/post/238e.html"/>
      <url>/post/238e.html</url>
      
        <content type="html"><![CDATA[<p>今天没时间了，先上我的Blog2</p><p><a href="https://henryhe613.github.io/blog3/" target="_blank" rel="noopener">南岩的另一个Blog</a></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拒绝使用Gitalk和Gitment</title>
      <link href="/post/cd88.html"/>
      <url>/post/cd88.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前我用的是Gitalk，毕竟方便啊，Matery主题自带，只需要配置OAuth就好了。</p><p>但是在V2XE里看见有人不推荐使用，我看了一下，也有点心有余悸。</p><p>同时Gitalk总是会抽，老是发不了评论。</p><h1 id="找Gitalk的OAuth"><a href="#找Gitalk的OAuth" class="headerlink" title="找Gitalk的OAuth"></a>找Gitalk的OAuth</h1><blockquote><p>以<a href="https://blog.xiaolegun.cn/" target="_blank" rel="noopener">xiaoleGun</a>的博客做例子，轻喷！！！</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200606205635.png" alt=""></p><p>我找到了一个Gitalk，右键<code>另存为</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200606205747.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200606210021.png" alt=""></p><p>html文件用VSCode打开，</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/img/20200606210218.png" alt=""></p><p>搜索<code>clientID</code>或者<code>clientSecret</code>，可以明显发现是明文保存。</p><p><code>clientID</code>和<code>clientSecret</code>的攻击方法我没研究过，但是根据Github和Gitalk官方的文档，这两个泄露是可以删除ID所有者的所有公有仓库的。可见危害之大。</p><h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>我写这篇博文是希望Gitalk和Gitment的作者可以引起重视，虽然还没有这种事件发生，但是这是个隐患。</p><p>希望看到本文的各位不要利用这个漏洞攻击，对攻击事件本人概不负责，本文提供学术交流，没有任何攻击倾向。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo链接优化</title>
      <link href="/post/876.html"/>
      <url>/post/876.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>按照Matery官方的文档，我在安装Matery主题时，也安装了中文链接转拼音的插件，即<code>hexo-permalink-pinyin</code>插件。</p><p>但是事后我发现，这个链接实在太长了，分享的时候着实很不方便。</p><p>所以我找到了这个插件：<code>hexo-abbrlink</code></p><h1 id="卸载hexo-permalink-pinyin插件"><a href="#卸载hexo-permalink-pinyin插件" class="headerlink" title="卸载hexo-permalink-pinyin插件"></a>卸载<code>hexo-permalink-pinyin</code>插件</h1><p>安装<code>hexo-abbrlink</code>之前必须卸载之前的插件，以免冲突。</p><p>如果你没安装过这个插件，可以直接跳过这一步。</p><p>右键Hexo根目录，点击<code>Git Bash Here</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall hexo-permalink-pinyin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>卸载之后，到Hexo根目录下的<code>_config.yml</code>中找到以下的配置并全部删除。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">permalink_pinyin</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">separator</span><span class="token punctuation">:</span> <span class="token string">'-'</span> <span class="token comment" spellcheck="true"># default: '-'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样第一步就完成了。</p><h1 id="安装hexo-abbrlink插件"><a href="#安装hexo-abbrlink插件" class="headerlink" title="安装hexo-abbrlink插件"></a>安装<code>hexo-abbrlink</code>插件</h1><p>右键Hexo根目录，点击<code>Git Bash Here</code>。</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装好后，在Hexo根目录下的<code>_config.yml</code>中粘贴以下的配置。</p><pre class="line-numbers language-yml"><code class="language-yml">abbrlink:    alg: crc16    rep: hex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后再在大约18行处找到<code>permalink</code>，参数改成<code>:abbrlink.html</code>或者<code>posts/:abbrlink.html</code></p><p>具体的样子可以自己hexo g &amp;&amp; hexo s预览一下看看。</p><p>我再解释一下<code>alg</code>和<code>rep</code>。</p><p><code>alg</code>是算法，共有两种算法。一种是<code>crc16</code>和<code>crc32</code>。</p><p><code>rep</code>是进制，共有两种进制。一种是<code>hex</code>和<code>dec</code>。</p><p><code>hex</code>是十六进制，<code>dec</code>是十进制。</p><p>下面是官方给出的例子，大家也可以自己尝试。</p><pre><code>crc16 &amp; hexhttps://post.zz173.com/posts/66c8.htmlcrc16 &amp; dechttps://post.zz173.com/posts/65535.htmlcrc32 &amp; hexhttps://post.zz173.com/posts/8ddf18fb.htmlcrc32 &amp; dechttps://post.zz173.com/posts/1690090958.html</code></pre><h1 id="安装之后"><a href="#安装之后" class="headerlink" title="安装之后"></a>安装之后</h1><p>装完之后，hexo g之后，再打开.md文件，你会发现<code>Front-matter</code>里面多了<code>abbrlink</code>的内容。这是abbrlink生成的，防止链接变动。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matery添加在线聊天功能</title>
      <link href="/post/5741.html"/>
      <url>/post/5741.html</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Matery主题默认支持两种在线聊天工具。一是DaoVoice，二是Tidio。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/06/05/tD38JS.png" alt="tD38JS.png"></p><p>上面一点黑灰色的是Tidio，下面一点蓝色的是DaoVoice。（Tidio按钮的颜色有5种可以选，DaoVoice不清楚，没有深入研究过）</p><p>我个人比较喜欢Tidio，毕竟长得好看哈哈。同时也不会挡住红色的主页按钮。</p><p>两个同时开启也可以，但肯定是有点奇奇怪怪的。</p><h1 id="安装TiDio-gt-去Tidio官网获取public-key"><a href="#安装TiDio-gt-去Tidio官网获取public-key" class="headerlink" title="安装TiDio=&gt;去Tidio官网获取public_key"></a>安装TiDio=&gt;去Tidio官网获取public_key</h1><p><a href="https://www.tidio.com/" target="_blank" rel="noopener">官网传送门</a></p><p>注册不多讲，不需要实名认证。有点慢是肯定的，毕竟用了CloudFlare的CDN。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/06/05/tD8iOs.png" alt="tD8iOs.png"></p><p>我们只需要Public Key，Private Key需要保管好，不能泄露。</p><h1 id="安装Tidio-gt-在-config-yml中启用Tidio"><a href="#安装Tidio-gt-在-config-yml中启用Tidio" class="headerlink" title="安装Tidio=&gt;在_config.yml中启用Tidio"></a>安装Tidio=&gt;在_config.yml中启用Tidio</h1><p>打开主题文件夹的<code>_config.yml</code>，在大约468行找到Tidio。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/06/05/tD8a1e.png" alt="tD8a1e.png"></p><p>把<code>enable</code>改为<code>true</code>，然后再<code>public_key</code>后填上从Tidio官网获取的Public Key。</p><blockquote><p>注意</p><p><code>public_key:</code>后面必须有一个空格，不然Hexo会报错。</p></blockquote><p>之后，hexo cl&amp;&amp;hexo g -d看看效果，还行吧？</p><h1 id="安装DaoVoice-gt-去Tidio官网获取appid"><a href="#安装DaoVoice-gt-去Tidio官网获取appid" class="headerlink" title="安装DaoVoice=&gt;去Tidio官网获取appid"></a>安装DaoVoice=&gt;去Tidio官网获取appid</h1><p><a href="http://www.daovoice.io/" target="_blank" rel="noopener">官网传送门</a></p><p>DaoVoice有点毛病，Github不能登录。微信我没尝试过，我就用了邮箱注册。而且这个邀请码在这里吓唬人，不填其实也不要紧的。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/06/05/tDJmM4.png" alt="tDJmM4.png"></p><p>保管好API token，下面要用。</p><h1 id="安装DaoVoice-gt-在-config-yml中启用DaoVoice"><a href="#安装DaoVoice-gt-在-config-yml中启用DaoVoice" class="headerlink" title="安装DaoVoice=&gt;在_config.yml中启用DaoVoice"></a>安装DaoVoice=&gt;在_config.yml中启用DaoVoice</h1><p>打开主题文件夹的<code>_config.yml</code>，在大约468行找到Tidio。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/06/05/tDJ8JK.png" alt="tDJ8JK.png"></p><p>把<code>enable</code>改为<code>true</code>，然后再<code>app_id</code>后填上从DaoVoice官网获取的API token。</p><blockquote><p>注意</p><p><code>app_id:</code>后面必须有一个空格，不然Hexo会报错。</p></blockquote><p>之后，hexo cl&amp;&amp;hexo g -d看看效果。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
            <tag> Tidio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Valine配置及安装</title>
      <link href="/post/942c.html"/>
      <url>/post/942c.html</url>
      
        <content type="html"><![CDATA[<h1 id="注册Valine并获取Appid和Appkey"><a href="#注册Valine并获取Appid和Appkey" class="headerlink" title="注册Valine并获取Appid和Appkey"></a>注册Valine并获取Appid和Appkey</h1><p>Valine注册很奇怪，不是去官网注册，而是去LeanCloud注册。</p><blockquote><p>[!TIP]</p><p>注意，免费版的Valine每天强制休眠6小时，也就是说，一天中有6小时无法评论。</p></blockquote><p>Valine有两个版本，一个是国际版，还有一个是国内版。<br>国际版不需要实名认证，国内版需要实名认证。</p><p>我选择国际版hh</p><p>链接： <a href="https://console.leancloud.app/" target="_blank" rel="noopener">国际版</a> <a href="https://www.leancloud.cn/" target="_blank" rel="noopener">国内版</a></p><p>注册不用我多说。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/20200604174953.png" alt=""></p><p>点击<code>创建应用</code>,选择<code>开发版</code>，名字任意。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/20200604180405.png" alt=""></p><p>进入项目，选择 设置=&gt;应用Keys=&gt;Credentials</p><p>你可以看见AppID和AppKey。</p><h1 id="Matery主题开启并配置Valine"><a href="#Matery主题开启并配置Valine" class="headerlink" title="Matery主题开启并配置Valine"></a>Matery主题开启并配置Valine</h1><p>打开主题文件的<code>_config.yml</code>，找到Valine，大概在303行左右。</p><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># The configuration of the Valine comment module is not activated by default.</span><span class="token comment" spellcheck="true"># To use it, activate the configuration item and set appId and appKey.</span><span class="token comment" spellcheck="true"># Valine 评论模块的配置，默认为不激活，如要使用，就请激活该配置项，并设置 appId 和 appKey.</span><span class="token key atrule">valine</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">appId</span><span class="token punctuation">:</span>   <span class="token key atrule">appKey</span><span class="token punctuation">:</span>   <span class="token key atrule">notify</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">verify</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">visitor</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">avatar</span><span class="token punctuation">:</span> <span class="token string">'mm'</span> <span class="token comment" spellcheck="true"># Gravatar style : mm/identicon/monsterid/wavatar/retro/hide</span>  <span class="token key atrule">pageSize</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">placeholder</span><span class="token punctuation">:</span> <span class="token string">'来不及解释了，快上车~~~'</span> <span class="token comment" spellcheck="true"># Comment Box placeholder</span>  <span class="token key atrule">background</span><span class="token punctuation">:</span> /medias/comment_bg.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把<code>enalbe</code>改成true，appId和appKey改成刚刚从leancloud获取的，</p><p>hexo cl&amp;&amp;hexo g&amp;&amp;hexo d看一下，应该就有Valine的评论区了。</p><blockquote><p>[!WARNING]</p><blockquote><p>yaml语法规定，:后面必须要有一个<code>Space</code>！！！不然会出错</p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> LeanCloud </tag>
            
            <tag> Valine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode更改中文和更改字体</title>
      <link href="/post/b77d.html"/>
      <url>/post/b77d.html</url>
      
        <content type="html"><![CDATA[<h1 id="VSCode更改中文"><a href="#VSCode更改中文" class="headerlink" title="VSCode更改中文"></a>VSCode更改中文</h1><p>前提是你得安装了VSCode。下载地址：<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">传送门</a></p><p>最好是下载<code>Stable</code>版本的，<code>Insiders</code>版的可能会不稳定</p><p>安装好之后应该是英文的。网上的方法可能有点不适用，我介绍一下我的方法。</p><p>下载Chinese插件。<a href="https://marketplace.visualstudio.com/items?itemName=MS-CEINTL.vscode-language-pack-zh-hans" target="_blank" rel="noopener">传送门</a></p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/20200604181411.png" alt=""></p><p>在右侧点击<code>Download Extension</code>，下载VSIX扩展文件（类似Chromium的CRX）。</p><p>在VSCode插件栏中，右上角···，选择<code>从VSIX安装</code>，选择刚刚下载的插件。</p><p>重启一下VSCode，应该就变中文了。</p><h1 id="VSCode安装JetBrainsMono-Bold字体。"><a href="#VSCode安装JetBrainsMono-Bold字体。" class="headerlink" title="VSCode安装JetBrainsMono-Bold字体。"></a>VSCode安装JetBrainsMono-Bold字体。</h1><p>我最喜欢JetBrainsMono-Bold的字体了。<a href="https://tperch-my.sharepoint.com/personal/perch_tperch_onmicrosoft_com/_layouts/15/download.aspx?UniqueId=aafb74d6-a0cb-4f67-8ca2-3a00c6c23cc7&Translate=false&tempauth=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvdHBlcmNoLW15LnNoYXJlcG9pbnQuY29tQDgzMTNlYTE3LTAzN2ItNDlkNS05NmU1LTJjNmZjY2FiZjg0ZiIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5iZiI6IjE1OTIwNDU0MDAiLCJleHAiOiIxNTkyMDQ5MDAwIiwiZW5kcG9pbnR1cmwiOiJiMEdCUEJFM1QwR28zNUFhcSs2MktIcUFFMFVzSGNNRDU2TWJJZzhsNDI0PSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTU4IiwiaXNsb29wYmFjayI6IlRydWUiLCJjaWQiOiJZMkkyTW1FeE5qWXRZelE1TkMwMFpUWmhMV0ZtTlRZdE1UQTBaakkxTURBNVkyVm0iLCJ2ZXIiOiJoYXNoZWRwcm9vZnRva2VuIiwic2l0ZWlkIjoiWldWak5UZGlZV0V0TURKaU55MDBaamczTFRrMVpERXROMkkzWTJGaE5tWmpZakZqIiwiYXBwX2Rpc3BsYXluYW1lIjoiQ2xvdWRyZXZlICIsImdpdmVuX25hbWUiOiLmoJYiLCJmYW1pbHlfbmFtZSI6IuaenSIsImFwcGlkIjoiZmU5NTU1MmQtMTA4OS00NzU4LTgyYzktYzJkNmU3MDM5ZTk3IiwidGlkIjoiODMxM2VhMTctMDM3Yi00OWQ1LTk2ZTUtMmM2ZmNjYWJmODRmIiwidXBuIjoicGVyY2hAdHBlcmNoLm9ubWljcm9zb2Z0LmNvbSIsInB1aWQiOiIxMDAzMjAwMEMwRUJGQjNBIiwiY2FjaGVrZXkiOiIwaC5mfG1lbWJlcnNoaXB8MTAwMzIwMDBjMGViZmIzYUBsaXZlLmNvbSIsInNjcCI6ImFsbGZpbGVzLndyaXRlIiwidHQiOiIyIiwidXNlUGVyc2lzdGVudENvb2tpZSI6bnVsbH0.bEFsZUllMktFMkNCdkI0aGFHNGpGNTF0N2VMcVY5S3E5RGE2ck1tTkFXcz0&ApiVersion=2.0" target="_blank" rel="noopener">下载地址_传送门</a></p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://cdn.jsdelivr.net/gh/henryhe613/pic/20200604181846.png" alt=""></p><p>VSCode中打开设置=&gt;文本编辑器=&gt;字体=&gt;Font Family，</p><p>改为<code>&#39;JetBrains Mono&#39;</code>.</p><p>前提是你已经安装了JetBrainsMono-Bold字体。</p><p>如果要使用其他字体，请先安装，再到控制面板里找到字体文件夹，确定字体在文件夹中的名字，再复制到VSCode。不然VSCode认不出来。我就栽在坑里爬了许久。</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Loading</title>
      <link href="/post/f59b.html"/>
      <url>/post/f59b.html</url>
      
        <content type="html"><![CDATA[<p>在Hexo根目录下新建scripts文件夹，里面再新建loading-pages.js</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* global hexo */</span><span class="token string">"use strict"</span><span class="token punctuation">;</span>hexo<span class="token punctuation">.</span>extend<span class="token punctuation">.</span>filter<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'after_render:html'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">const</span> injectHead <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;style type="text/css" lang="css">    #loading-container{        position: fixed;        top: 0;        left: 0;        min-height: 100vh;        width: 100vw;        z-index: 9999;        display: flex;        flex-direction: column;        justify-content: center;        align-items: center;        background: #FFF;        text-align: center;        /* loader页面消失采用渐隐的方式*/        -webkit-transition: opacity 1s ease;        -moz-transition: opacity 1s ease;        -o-transition: opacity 1s ease;        transition: opacity 1s ease;    }    .loading-image{        width: 120px;        height: 50px;        transform: translate(-50%);    }    .loading-image div:nth-child(2) {        -webkit-animation: pacman-balls 1s linear 0s infinite;        animation: pacman-balls 1s linear 0s infinite    }    .loading-image div:nth-child(3) {        -webkit-animation: pacman-balls 1s linear .33s infinite;        animation: pacman-balls 1s linear .33s infinite    }    .loading-image div:nth-child(4) {        -webkit-animation: pacman-balls 1s linear .66s infinite;        animation: pacman-balls 1s linear .66s infinite    }    .loading-image div:nth-child(5) {        -webkit-animation: pacman-balls 1s linear .99s infinite;        animation: pacman-balls 1s linear .99s infinite    }   .loading-image div:first-of-type {        width: 0;        height: 0;        border: 25px solid #49b1f5;        border-right-color: transparent;        border-radius: 25px;        -webkit-animation: rotate_pacman_half_up .5s 0s infinite;        animation: rotate_pacman_half_up .5s 0s infinite;    }    .loading-image div:nth-child(2) {        width: 0;        height: 0;        border: 25px solid #49b1f5;        border-right-color: transparent;        border-radius: 25px;        -webkit-animation: rotate_pacman_half_down .5s 0s infinite;        animation: rotate_pacman_half_down .5s 0s infinite;        margin-top: -50px;    }    @-webkit-keyframes rotate_pacman_half_up {0% {transform: rotate(270deg)}50% {transform: rotate(1turn)}to {transform: rotate(270deg)}}    @keyframes rotate_pacman_half_up {0% {transform: rotate(270deg)}50% {transform: rotate(1turn)}to {transform: rotate(270deg)}}    @-webkit-keyframes rotate_pacman_half_down {0% {transform: rotate(90deg)}50% {transform: rotate(0deg)}to {transform: rotate(90deg)}}    @keyframes rotate_pacman_half_down {0% {transform: rotate(90deg)}50% {transform: rotate(0deg)}to {transform: rotate(90deg)}}    @-webkit-keyframes pacman-balls {75% {opacity: .7}to {transform: translate(-100px, -6.25px)}}    @keyframes pacman-balls {75% {opacity: .7}to {transform: translate(-100px, -6.25px)}}    .loading-image div:nth-child(3),    .loading-image div:nth-child(4),    .loading-image div:nth-child(5),    .loading-image div:nth-child(6){        background-color: #49b1f5;        width: 15px;        height: 15px;        border-radius: 100%;        margin: 2px;        width: 10px;        height: 10px;        position: absolute;        transform: translateY(-6.25px);        top: 25px;        left: 100px;    }    .loading-text{        margin-bottom: 20vh;        text-align: center;        color: #2c3e50;        font-size: 2rem;        box-sizing: border-box;        padding: 0 10px;        text-shadow: 0 2px 10px rgba(0,0,0,0.2);    }    @media only screen and (max-width: 500px) {         .loading-text{            font-size: 1.5rem;         }    }    .fadeout {        opacity: 0;        filter: alpha(opacity=0);    }    /* logo出现动画 */    @-webkit-keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);transform:translate3d(0,-100%,0)}100%{opacity:1;-webkit-transform:none;transform:none}}    @keyframes fadeInDown{0%{opacity:0;-webkit-transform:translate3d(0,-100%,0);}} &lt;/style> &lt;script>(function () {    const loaded = function(){       setTimeout(function(){            const loader = document.getElementById("loading-container");            loader.className="fadeout" ;//使用渐隐的方法淡出loading page            // document.getElementById("body-wrap").style.display="flex";            setTimeout(function(){                loader.style.display="none";            },1000);         },1000);//强制显示loading page 1s      };    loaded();})() &lt;/script>`</span></span><span class="token punctuation">;</span>     <span class="token keyword">const</span> injectBody <span class="token operator">=</span> <span class="token template-string"><span class="token string">` &lt;div id="loading-container">     &lt;p class="loading-text">玩命加载中 . . . &lt;/p>      &lt;div class="loading-image">         &lt;div>&lt;/div>         &lt;div>&lt;/div>         &lt;div>&lt;/div>         &lt;div>&lt;/div>          &lt;div>&lt;/div>     &lt;/div> &lt;/div>`</span></span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/&lt;\/head>/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;/head>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         htmlContent <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> lastIndex<span class="token punctuation">)</span> <span class="token operator">+</span> injectHead <span class="token operator">+</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>lastIndex<span class="token punctuation">,</span> htmlContent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex">/&lt;body>/gi</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>htmlContent<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">let</span> index <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'&lt;body>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         htmlContent <span class="token operator">=</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">+</span> injectBody <span class="token operator">+</span> htmlContent<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> htmlContent<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> htmlContent<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CloudFlare的Workers</title>
      <link href="/post/9198.html"/>
      <url>/post/9198.html</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token comment" spellcheck="true">/** * static files (404.html, sw.js, conf.js) */</span><span class="token keyword">const</span> ASSET_URL <span class="token operator">=</span> <span class="token string">'https://www.yelow.ga/'</span><span class="token keyword">const</span> JS_VER <span class="token operator">=</span> <span class="token number">10</span><span class="token keyword">const</span> MAX_RETRY <span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">/** @type {RequestInit} */</span><span class="token keyword">const</span> PREFLIGHT_INIT <span class="token operator">=</span> <span class="token punctuation">{</span>  status<span class="token punctuation">:</span> <span class="token number">204</span><span class="token punctuation">,</span>  headers<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token string">'access-control-allow-origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token string">'access-control-allow-methods'</span><span class="token punctuation">:</span> <span class="token string">'GET,POST,PUT,PATCH,TRACE,DELETE,HEAD,OPTIONS'</span><span class="token punctuation">,</span>    <span class="token string">'access-control-max-age'</span><span class="token punctuation">:</span> <span class="token string">'1728000'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {any} body * @param {number} status * @param {Object&lt;string, string>} headers */</span><span class="token keyword">function</span> <span class="token function">makeRes</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> status <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  headers<span class="token punctuation">[</span><span class="token string">'--ver'</span><span class="token punctuation">]</span> <span class="token operator">=</span> JS_VER  headers<span class="token punctuation">[</span><span class="token string">'access-control-allow-origin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span> <span class="token punctuation">{</span>status<span class="token punctuation">,</span> headers<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {string} urlStr  */</span><span class="token keyword">function</span> <span class="token function">newUrl</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span> e <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> ret <span class="token operator">=</span> <span class="token function">fetchHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token function">makeRes</span><span class="token punctuation">(</span><span class="token string">'cfworker error:\n'</span> <span class="token operator">+</span> err<span class="token punctuation">.</span>stack<span class="token punctuation">,</span> <span class="token number">502</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  e<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** * @param {FetchEvent} e  */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">fetchHandler</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> req <span class="token operator">=</span> e<span class="token punctuation">.</span>request  <span class="token keyword">const</span> urlStr <span class="token operator">=</span> req<span class="token punctuation">.</span>url  <span class="token keyword">const</span> urlObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span>  <span class="token keyword">const</span> path <span class="token operator">=</span> urlObj<span class="token punctuation">.</span>href<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">.</span>origin<span class="token punctuation">.</span>length<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>urlObj<span class="token punctuation">.</span>protocol <span class="token operator">===</span> <span class="token string">'http:'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    urlObj<span class="token punctuation">.</span>protocol <span class="token operator">=</span> <span class="token string">'https:'</span>    <span class="token keyword">return</span> <span class="token function">makeRes</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token number">301</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      <span class="token string">'strict-transport-security'</span><span class="token punctuation">:</span> <span class="token string">'max-age=99999999; includeSubDomains; preload'</span><span class="token punctuation">,</span>      <span class="token string">'location'</span><span class="token punctuation">:</span> urlObj<span class="token punctuation">.</span>href<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'/http/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">httpHandler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">case</span> <span class="token string">'/http'</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token function">makeRes</span><span class="token punctuation">(</span><span class="token string">'请更新 cfworker 到最新版本!'</span><span class="token punctuation">)</span>  <span class="token keyword">case</span> <span class="token string">'/ws'</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token function">makeRes</span><span class="token punctuation">(</span><span class="token string">'not support'</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">)</span>  <span class="token keyword">case</span> <span class="token string">'/works'</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token function">makeRes</span><span class="token punctuation">(</span><span class="token string">'it works'</span><span class="token punctuation">)</span>  <span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">// static files</span>    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span>ASSET_URL <span class="token operator">+</span> path<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {Request} req * @param {string} pathname */</span><span class="token keyword">function</span> <span class="token function">httpHandler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> pathname<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> reqHdrRaw <span class="token operator">=</span> req<span class="token punctuation">.</span>headers  <span class="token keyword">if</span> <span class="token punctuation">(</span>reqHdrRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'x-jsproxy'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> Response<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// preflight</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span> <span class="token operator">&amp;&amp;</span>      reqHdrRaw<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'access-control-request-headers'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> PREFLIGHT_INIT<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> acehOld <span class="token operator">=</span> <span class="token boolean">false</span>  <span class="token keyword">let</span> rawSvr <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">let</span> rawLen <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">let</span> rawEtag <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">const</span> reqHdrNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>reqHdrRaw<span class="token punctuation">)</span>  reqHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'x-jsproxy'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 此处逻辑和 http-dec-req-hdr.lua 大致相同</span>  <span class="token comment" spellcheck="true">// https://github.com/EtherDream/jsproxy/blob/master/lua/http-dec-req-hdr.lua</span>  <span class="token keyword">const</span> refer <span class="token operator">=</span> reqHdrNew<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'referer'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> query <span class="token operator">=</span> refer<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>refer<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'?'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">makeRes</span><span class="token punctuation">(</span><span class="token string">'missing params'</span><span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> param <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URLSearchParams</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">'--'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 系统信息</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>k<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">case</span> <span class="token string">'aceh'</span><span class="token punctuation">:</span>        acehOld <span class="token operator">=</span> <span class="token boolean">true</span>        <span class="token keyword">break</span>      <span class="token keyword">case</span> <span class="token string">'raw-info'</span><span class="token punctuation">:</span>        <span class="token punctuation">[</span>rawSvr<span class="token punctuation">,</span> rawLen<span class="token punctuation">,</span> rawEtag<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 还原 HTTP 请求头</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>v<span class="token punctuation">)</span> <span class="token punctuation">{</span>        reqHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        reqHdrNew<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>param<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">'referer'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    reqHdrNew<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'referer'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// cfworker 会把路径中的 `//` 合并成 `/`</span>  <span class="token keyword">const</span> urlStr <span class="token operator">=</span> pathname<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^(https?):\/+/</span><span class="token punctuation">,</span> <span class="token string">'$1://'</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> urlObj <span class="token operator">=</span> <span class="token function">newUrl</span><span class="token punctuation">(</span>urlStr<span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>urlObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">makeRes</span><span class="token punctuation">(</span><span class="token string">'invalid proxy url: '</span> <span class="token operator">+</span> urlStr<span class="token punctuation">,</span> <span class="token number">403</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/** @type {RequestInit} */</span>  <span class="token keyword">const</span> reqInit <span class="token operator">=</span> <span class="token punctuation">{</span>    method<span class="token punctuation">:</span> req<span class="token punctuation">.</span>method<span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> reqHdrNew<span class="token punctuation">,</span>    redirect<span class="token punctuation">:</span> <span class="token string">'manual'</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    reqInit<span class="token punctuation">.</span>body <span class="token operator">=</span> req<span class="token punctuation">.</span>body  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token function">proxy</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">,</span> reqInit<span class="token punctuation">,</span> acehOld<span class="token punctuation">,</span> rawLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** *  * @param {URL} urlObj  * @param {RequestInit} reqInit  * @param {number} retryTimes  */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">proxy</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">,</span> reqInit<span class="token punctuation">,</span> acehOld<span class="token punctuation">,</span> rawLen<span class="token punctuation">,</span> retryTimes<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">.</span>href<span class="token punctuation">,</span> reqInit<span class="token punctuation">)</span>  <span class="token keyword">const</span> resHdrOld <span class="token operator">=</span> res<span class="token punctuation">.</span>headers  <span class="token keyword">const</span> resHdrNew <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Headers</span><span class="token punctuation">(</span>resHdrOld<span class="token punctuation">)</span>  <span class="token keyword">let</span> expose <span class="token operator">=</span> <span class="token string">'*'</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>k<span class="token punctuation">,</span> v<span class="token punctuation">]</span> <span class="token keyword">of</span> resHdrOld<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">===</span> <span class="token string">'access-control-allow-origin'</span> <span class="token operator">||</span>        k <span class="token operator">===</span> <span class="token string">'access-control-expose-headers'</span> <span class="token operator">||</span>        k <span class="token operator">===</span> <span class="token string">'location'</span> <span class="token operator">||</span>        k <span class="token operator">===</span> <span class="token string">'set-cookie'</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">'--'</span> <span class="token operator">+</span> k      resHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> v<span class="token punctuation">)</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>acehOld<span class="token punctuation">)</span> <span class="token punctuation">{</span>        expose <span class="token operator">=</span> expose <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> x      <span class="token punctuation">}</span>      resHdrNew<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>acehOld <span class="token operator">&amp;&amp;</span>      k <span class="token operator">!==</span> <span class="token string">'cache-control'</span> <span class="token operator">&amp;&amp;</span>      k <span class="token operator">!==</span> <span class="token string">'content-language'</span> <span class="token operator">&amp;&amp;</span>      k <span class="token operator">!==</span> <span class="token string">'content-type'</span> <span class="token operator">&amp;&amp;</span>      k <span class="token operator">!==</span> <span class="token string">'expires'</span> <span class="token operator">&amp;&amp;</span>      k <span class="token operator">!==</span> <span class="token string">'last-modified'</span> <span class="token operator">&amp;&amp;</span>      k <span class="token operator">!==</span> <span class="token string">'pragma'</span>    <span class="token punctuation">)</span> <span class="token punctuation">{</span>      expose <span class="token operator">=</span> expose <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> k    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>acehOld<span class="token punctuation">)</span> <span class="token punctuation">{</span>    expose <span class="token operator">=</span> expose <span class="token operator">+</span> <span class="token string">',--s'</span>    resHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'--t'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// verify</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>rawLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> newLen <span class="token operator">=</span> resHdrOld<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'content-length'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">''</span>    <span class="token keyword">const</span> badLen <span class="token operator">=</span> <span class="token punctuation">(</span>rawLen <span class="token operator">!==</span> newLen<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>badLen<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">&lt;</span> MAX_RETRY<span class="token punctuation">)</span> <span class="token punctuation">{</span>        urlObj <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">parseYtVideoRedir</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> res<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>urlObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token function">proxy</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">,</span> reqInit<span class="token punctuation">,</span> acehOld<span class="token punctuation">,</span> rawLen<span class="token punctuation">,</span> retryTimes <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token function">makeRes</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'--error'</span><span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`bad len: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, except: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>rawLen<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">,</span>        <span class="token string">'access-control-expose-headers'</span><span class="token punctuation">:</span> <span class="token string">'--error'</span><span class="token punctuation">,</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>retryTimes <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      resHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'--retry'</span><span class="token punctuation">,</span> retryTimes<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">let</span> status <span class="token operator">=</span> res<span class="token punctuation">.</span>status  resHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'access-control-expose-headers'</span><span class="token punctuation">,</span> expose<span class="token punctuation">)</span>  resHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'access-control-allow-origin'</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span>  resHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'--s'</span><span class="token punctuation">,</span> status<span class="token punctuation">)</span>  resHdrNew<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token string">'--ver'</span><span class="token punctuation">,</span> JS_VER<span class="token punctuation">)</span>  resHdrNew<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'content-security-policy'</span><span class="token punctuation">)</span>  resHdrNew<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'content-security-policy-report-only'</span><span class="token punctuation">)</span>  resHdrNew<span class="token punctuation">.</span><span class="token keyword">delete</span><span class="token punctuation">(</span><span class="token string">'clear-site-data'</span><span class="token punctuation">)</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>status <span class="token operator">===</span> <span class="token number">301</span> <span class="token operator">||</span>      status <span class="token operator">===</span> <span class="token number">302</span> <span class="token operator">||</span>      status <span class="token operator">===</span> <span class="token number">303</span> <span class="token operator">||</span>      status <span class="token operator">===</span> <span class="token number">307</span> <span class="token operator">||</span>      status <span class="token operator">===</span> <span class="token number">308</span>  <span class="token punctuation">)</span> <span class="token punctuation">{</span>    status <span class="token operator">=</span> status <span class="token operator">+</span> <span class="token number">10</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>body<span class="token punctuation">,</span> <span class="token punctuation">{</span>    status<span class="token punctuation">,</span>    headers<span class="token punctuation">:</span> resHdrNew<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {URL} urlObj  */</span><span class="token keyword">function</span> <span class="token function">isYtUrl</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    urlObj<span class="token punctuation">.</span>host<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">'.googlevideo.com'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>    urlObj<span class="token punctuation">.</span>pathname<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">'/videoplayback'</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * @param {URL} urlObj  * @param {number} newLen  * @param {Response} res  */</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">parseYtVideoRedir</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">,</span> newLen<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>newLen <span class="token operator">></span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isYtUrl</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token keyword">await</span> res<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    urlObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isYtUrl</span><span class="token punctuation">(</span>urlObj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">null</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> urlObj<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
            <tag> CDN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub的raw无法访问</title>
      <link href="/post/a15e.html"/>
      <url>/post/a15e.html</url>
      
        <content type="html"><![CDATA[<p>raw.githubusercontent.com收到Qos无法访问</p><p>其实没必要用梯子，修改hosts即可。</p><p>这是网上大神的hosts：</p><pre><code>199.232.4.133 raw.githubusercontent.com</code></pre><p>也可以去<a href="https://www.ipaddress.com/" target="_blank" rel="noopener">https://www.ipaddress.com/</a> 查</p><p>这是我查得的：</p><pre><code>199.232.68.133 raw.githubusercontent.com</code></pre><p>hosts文件在这里（Windows）</p><pre><code>C:\Windows\System32\drivers\etc\hosts</code></pre><p>推荐UAC的Notepad，可以直接保存。</p><blockquote><p><strong>注意</strong><br>更新hosts后，需要cmd运行<code>ipconfig /flushdns</code>才行</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Computer Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hosts </tag>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去掉Chromium的禁用开发者扩展提示</title>
      <link href="/post/7653.html"/>
      <url>/post/7653.html</url>
      
        <content type="html"><![CDATA[<h1 id="去掉Chromium的禁用开发者扩展提示"><a href="#去掉Chromium的禁用开发者扩展提示" class="headerlink" title="去掉Chromium的禁用开发者扩展提示"></a>去掉Chromium的禁用开发者扩展提示</h1><p>对于开发人员来说，Chrome显然是一个必需品。庞大的插件库十分方便。<br>但是Google不知为什么就加了这么一个弹出，十分恶心。</p><p>祭出大神的dll替换工具，可点击下载。</p><p><a href="/images/去除Chrome请停用以开发者模式运行的扩展程序.rar">去除Chrome请停用以开发者模式运行的扩展程序_点击下载</a></p><p>edge的二次开发做的不错，都把chrome.dll给改了。</p><p>像Cent Browser就没改，不过Cent和Chrome的图标确实有点像~~</p><p>安装目录在这里：</p><pre><code>C:\Program Files (x86)\Microsoft\Edge\Application\83.0.478.37</code></pre><blockquote><p><em>注意</em><br>这是默认的安装路径，不同的版本号可能有所不同！！！</p></blockquote><p>记得把Edge关了，然后我们把msedge.dll改成chrome.dll，把刚刚下载的软件解压，拷贝到edge根目录下（就是刚刚代码块里的）</p><p>用管理员模式运行“去除Chrome请停用以开发者模式运行的扩展程序”，</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/24/YziUL8.png" alt="YziUL8.png"></p><p>点<code>应用</code>，成功后，把dll的名字改回msedge.dll。</p><p>再打开edge。</p><p>是不是OK了？</p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Edge </tag>
            
            <tag> Chromium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新旧Edge浏览器共存</title>
      <link href="/post/6799.html"/>
      <url>/post/6799.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/24/YxLOZq.png" alt="YxLOZq.png"></p><pre><code>~~1. 在Windows搜索中搜索组策略编辑器。2. 导航到计算机配置——》打开管理模板&gt; Microsoft Edge更新&gt;应用程序3. 选择“允许Microsoft Edge并排浏览器体验”。4. 点击“修改政策”设置。5. 选择“启用”，然后单击“确定”。~~</code></pre><p>以上是网上的方法，Chromium Edge v83版已不适用。</p><p>因为在gpedit里找不到<code>“允许Microsoft Edge并排浏览器体验”</code>。</p><p>现在只能用注册表。</p><p>把一下对应代码复制到.reg文件中，然后重新安装Chromium Edge就好了。</p><p>添加旧EDGE</p><pre class="line-numbers language-reg"><code class="language-reg">Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\EdgeUpdate]"Allowsxs"=dword:00000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>移除旧EDGE</p><pre class="line-numbers language-reg"><code class="language-reg">Windows Registry Editor Version 5.00-[HKEY_LOCAL_MACHINE\SOFTWARE\Policies\Microsoft\EdgeUpdate]"Allowsxs"=dword:00000001<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Edge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换Chromium内核浏览器无法上网</title>
      <link href="/post/dbe5.html"/>
      <url>/post/dbe5.html</url>
      
        <content type="html"><![CDATA[<h1 id="更换Chromium内核浏览器无法上网、"><a href="#更换Chromium内核浏览器无法上网、" class="headerlink" title="更换Chromium内核浏览器无法上网、"></a>更换Chromium内核浏览器无法上网、</h1><p>说实话我的英语也不是特别好，所以一直再找<code>Github</code>汉化版。但是<code>Cent Browser</code>内嵌的<code>Google翻译</code>不咋地，老是抽。看网友都用<code>360极速浏览器</code>，我也真香了，用了360还比较良心的极速浏览器。</p><p>但是360也抽了。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/23/Yxi63t.png" alt="Yxi63t.png"></p><p>于是我试试<code>遨游浏览器</code>，因为这个用的人也很多。</p><p>也抽了。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/23/YxiTCn.png" alt="YxiTCn.png"></p><p>我好奇啊，连续两个浏览器抽了。</p><p>应该是我的环境问题。</p><p>我先把遨游换成IE内核。</p><p>“国产”浏览器大都是<code>Chromium</code>和<code>IE</code>双内核。</p><p>嘿嘿，遨游好了~~</p><p>那为什么Chromium不行？</p><p>我猜是三个浏览器用同一个内核所致。</p><p><code>Cent Browser</code>我用了<code>PP谷歌助手</code>，之前为了访问谷歌，找到的这么一个插件。</p><p>附上<code>PP谷歌助手</code>在<a href="https://chrome.zzzmh.cn/index" target="_blank" rel="noopener">极简插件</a> 的链接：<a href="https://chrome.zzzmh.cn/info?token=kahndhhhcnignmbbpiobmdlgjhgfkfil" target="_blank" rel="noopener">PP谷歌助手</a></p><p>之前我为了在家上网课不卡，把<code>PP谷歌助手</code>关了，结果没法上网。有种浏览器主页被劫持的味道。。。</p><p>没办法，我把<code>PP谷歌助手</code>打开还。于是又可以上网了。</p><p>所以我打算把<code>PP谷歌助手</code>移植到360上。</p><h1 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h1><p>打开<code>Cent Browser</code>的<a href="chrome://extensions/">扩展页</a></p><p>打开右上角（不同浏览器可能不同）的<code>开发者模式</code></p><p>找到安装的<code>PP谷歌助手</code>。</p><p>复制<code>PP谷歌助手</code>的ID。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/23/YxkmeU.png" alt="YxkmeU.png"></p><p>我这里的ID是：</p><pre><code>ID：kahndhhhcnignmbbpiobmdlgjhgfkfil</code></pre><blockquote><p>注意：不同版本的Extension的ID是不同的！！！</p></blockquote><p>然后去资源管理器里搜索这个ID。</p><p>我是用<code>Everything</code>，这个软件快。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/23/YxAS6x.png" alt="YxAS6x.png"></p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://raw.githubusercontent.com/HenryHe613/Pic/master/ScreenShot_20200523200316.png" alt=""><br>一般搜索出来只有红框里的第二个，我这里其他的四个是我自己创建的。</p><p>如果是<code>Cent Browser</code>的用户，可以直接使用一下链接（记得改成自己的用户名和安装路径哦）：</p><pre><code>C:\Users\{User Name}\AppData\Local\CentBrowser\User Data\Default\Extensions</code></pre>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Chromium </tag>
            
            <tag> 浏览器 </tag>
            
            <tag> vnp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信网关F612破解</title>
      <link href="/post/9e79.html"/>
      <url>/post/9e79.html</url>
      
        <content type="html"><![CDATA[<h1 id="电信家庭网关中兴F612破解超级账号"><a href="#电信家庭网关中兴F612破解超级账号" class="headerlink" title="电信家庭网关中兴F612破解超级账号"></a>电信家庭网关中兴F612破解超级账号</h1><blockquote><p>网上有许多教程，但是大都有误，这是站长亲自试验得出的方法。</p></blockquote><p>最近换了电信的千兆光猫，看见网上有类似教程，我就试了一下。</p><p>期间有许多坑，这里就不一一讲了。</p><p>打开电脑的CMD窗口</p><p>输入命令，一直Ping网关的128端口：</p><pre class="line-numbers language-cmd"><code class="language-cmd">ping 192.168.1.1 -l 128 -t<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不要关闭原来的窗口，再打开一个CMD，输入命令：</p><pre class="line-numbers language-cmd"><code class="language-cmd">telnet 192.168.1.1 10128<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>账号：root<br>密码：Zte521</p><p>在telnet中输入：</p><pre><code>sendcmd 1 DB p DevAuthInfo</code></pre><p>慢慢找，就能找到超级管理员密码了。<br>账号一般是telecomadmin</p><p>如果要把网关的拨号模式改为桥接模式，其实不用超级管理员账号的。</p><p><a href="http://192.168.1.1/bridge_route.gch" target="_blank" rel="noopener">http://192.168.1.1/bridge_route.gch</a></p><p>打开这个网址即可了。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电信 </tag>
            
            <tag> 破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人常用网址/代码</title>
      <link href="/post/2361.html"/>
      <url>/post/2361.html</url>
      
        <content type="html"><![CDATA[<h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><ol><li><p><a href="https://imgchr.com/" target="_blank" rel="noopener">路过图床</a></p></li><li><p><a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNS Pod</a></p></li><li><p><a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">CloudFlare-Dashbroad</a></p></li><li><p><a href="https://github.com/" target="_blank" rel="noopener">Github</a></p></li><li><p><a href="http://tool.chinaz.com/tools/hash.aspx" target="_blank" rel="noopener">Hash生成-ChinaZ</a></p></li><li><p><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">Ping-ChinaZ</a></p></li><li><p><a href="https://picgo.github.io/PicGo-Doc/" target="_blank" rel="noopener">PicGo</a></p></li><li><p><a href="https://coding.net/" target="_blank" rel="noopener">Coding</a></p></li><li><p><a href="https://gitee.com/" target="_blank" rel="noopener">码云</a></p></li><li><p><a href="https://drive.520526.xyz/" target="_blank" rel="noopener">免费不限速网盘</a></p></li><li><p><a href="http://www.fontawesome.com.cn/" target="_blank" rel="noopener">Font Awesome 中文网</a></p></li></ol><h1 id="搜索引擎"><a href="#搜索引擎" class="headerlink" title="搜索引擎"></a>搜索引擎</h1><ol><li><p><a href="https://cn.bing.com/" target="_blank" rel="noopener">Bing</a></p></li><li><p><a href="https://www2.bing.com/" target="_blank" rel="noopener">Bing-2</a>  Bing在国内老是被DNS污染。可以访问www2.bing.com解决。</p></li></ol><p>如果要把&lt;www2.bing.com&gt;设置成地址栏搜索引擎，网址格式需这样设置：</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/24/YxXBge.png" alt="YxXBge.png"></p><pre><code>//搜索引擎www2.bing.com//关键字www2.bing.com//网址格式（用“%s”代替搜索字词）https://www2.bing.com/search?q=%s</code></pre><ol start="3"><li><a href="https://www.magi.com/" target="_blank" rel="noopener">Magi</a>     这是我很喜欢的一个人工智能搜索引擎<br>下面是设置方法：<br><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/24/YxjuqA.png" alt="YxjuqA.png"></li></ol><pre><code>//搜索引擎Magi//关键字magi.com//网址格式（用“%s”代替搜索字词）https://magi.com/search?fr=opensearch&amp;q=%s</code></pre><h1 id="计算机"><a href="#计算机" class="headerlink" title="计算机"></a>计算机</h1><ol><li><p><a href="http://ip138.com" target="_blank" rel="noopener">ip138</a><br>  显示当前的IP地址</p></li><li><p><a href="https://greasyfork.org/zh-CN/" target="_blank" rel="noopener">Greasy Fork</a><br> 脚本</p></li><li><p><a href="https://www.sojson.com/image/format.html" target="_blank" rel="noopener">图片格式转换</a></p></li><li><p><a href="http://www.hackhw.com/" target="_blank" rel="noopener">黑域基地</a></p></li><li><p><a href="https://www.appinn.com/" target="_blank" rel="noopener">小众软件</a></p></li></ol><h1 id="软件下载"><a href="#软件下载" class="headerlink" title="软件下载"></a>软件下载</h1><ol><li><p><a href="http://www.pc6.com/" target="_blank" rel="noopener">PC6下载站</a></p></li><li><p><a href="https://www.onlinedown.net/" target="_blank" rel="noopener">华军软件园</a></p></li><li><p><a href="http://www.dayanzai.me/" target="_blank" rel="noopener">大眼仔旭</a></p></li><li><p><a href="https://www.ypojie.com/" target="_blank" rel="noopener">易破解</a></p></li></ol><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><pre><code>https://blog.gclmit.club/archives/1a205ea0.html</code></pre>]]></content>
      
      
      <categories>
          
          <category> Computer Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网址and代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>申请Freenom域名的正确做法</title>
      <link href="/post/f3a0.html"/>
      <url>/post/f3a0.html</url>
      
        <content type="html"><![CDATA[<h1 id="申请Freenom域名的正确做法"><a href="#申请Freenom域名的正确做法" class="headerlink" title="申请Freenom域名的正确做法"></a>申请Freenom域名的正确做法</h1><p><a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">Freenom官网</a></p><blockquote><p>注意：本教程是站长的亲身经验，会有很多坑，请大家多多包涵。</p></blockquote><p>对于新手个人站长，买一个几十块甚至几百块的域名显然不太合适。所以，Freenom出现了。它能帮我们免费注册.ga .ml .tk .gq .cf的顶级域名。这些顶级域名都是小国家的，分别是加蓬、马里共和国、托克劳群岛、赤道几内亚和中非共和国。<br>既然天上掉那么大个馅饼，谁不要呢？于是百度上出现了一堆关于Freenom域名申请的教程。然而，经过我的检验，这些教程要么是 <del>菜</del> 有误，要么就是 <del>赚流量</del> 不会。</p><h3 id="主要步骤："><a href="#主要步骤：" class="headerlink" title="主要步骤："></a>主要步骤：</h3><p> 1.加快Freenom的访问速度<br> 2.注册Freenom账号<br> 3.注册免费域名<br> 4.更改域名解析</p><h1 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h1><p>让我们先去Freenom官网瞅瞅。</p><p><a href="https://www.freenom.com/zh/index.html?lang=zh" target="_blank" rel="noopener">Freenom官网</a></p><p>好慢，还没有图片，真丑。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8VKSJ.png" alt="Y8VKSJ.png"></p><p>更奇怪的是，，，我居然能够把搜索框的文字删掉。。。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8VlO1.png" alt="Y8VlO1.png"></p><p>这可把我吓坏了。这网站居然长这样。</p><p>上网一搜，嗯嗯，似乎需要梯子。</p><p>可以看看我之前的博文<a href="https://www.yelow.ga/2020/05/02/ti-zi/">梯子</a> ，但是这里用不着。但是我之前就用了，可以注册，但是更繁琐，我找了一个更好的方法。</p><p>但是还是有必要介绍原方法。</p><p>我拿来梯子，爬！！！</p><p>爬上了，才发现Freenom的网站原来还行，图片挺好的。于是输入我想要的域名，点击<code>Check availability</code>,搜索域名。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8epKs.png" alt="Y8epKs.png"></p><p>很好，我找了我要的域名。</p><p>那么，注册！！！</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8e6zQ.png" alt="Y8e6zQ.png"></p><p>点击<code>现在获取</code>，then。。。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8eRLn.png" alt="Y8eRLn.png"></p><p>不可用？？</p><p>一个一个选，居然都不能选。换一个也是一样。</p><p>莫不是Freenom抽了？╰（‵□′）╯</p><h1 id="注册Freenom账号"><a href="#注册Freenom账号" class="headerlink" title="注册Freenom账号"></a>注册Freenom账号</h1><blockquote><p>这一步网上很多教程都省略了，没有Freenom账号，你在搜索域名时根本无法选域名。</p></blockquote><p>一顿Bing，发现是没注册的缘故。</p><p>那么注册一个账号吧，但是不知道入口。</p><p>再找，找到了，这Freenom真抠，藏这么深。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8m6k6.png" alt="Y8m6k6.png"></p><p>点击首页的<code>合作伙伴</code>，选择<code>开发人员</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8mzBn.png" alt="Y8mzBn.png"></p><p>点击<code>&gt; 今天就获得一个随机的域账户！</code>。</p><p>变英文了。英文不好的同志，麻烦自己翻译一下啦/<del>/</del>/~ ~ ~ ~</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8nrvQ.png" alt="Y8nrvQ.png"></p><p>再<code>1</code>处输入你的电子邮箱，然后点击<code>2</code>处确认发送邮件。</p><p>之后的过程不赘述了哈</p><blockquote><p>注意：提交不能太频繁了。不然Freenom把你列入黑名单就不成了。</p><p>还要，现在我乱填了个人信息，其实这也是我的习惯了哈哈</p></blockquote><h1 id="注册免费域名"><a href="#注册免费域名" class="headerlink" title="注册免费域名"></a>注册免费域名</h1><p>好了，回到首页，右上角有个<code>Sign in</code>，中文是<code>登入</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8uri6.png" alt="Y8uri6.png"></p><p>输入注册的账号密码，点<code>Login</code>，登录吧。</p><p>别告诉我你找不到那里搜域名了，看下图：</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8u4ot.png" alt="Y8u4ot.png"></p><p>找到了吧？</p><p>继续吧，搜索。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8KXcD.png" alt="Y8KXcD.png"></p><p>选好之后呢，选择<code>Checkout</code>，“购买<br>”</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8MKNq.png" alt="Y8MKNq.png"></p><p>先不要改参数，把使用时间改为<code>12 Months @ Free</code>，然后信心十足地，按下<code>Continue</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y8M7rQ.png" alt="Y8M7rQ.png"></p><p>勾上小框框，终于可以<code>Complete Order</code>了。</p><p>但是相信大多数的人把接下来的英文翻译一下，都会发现注册没成功。</p><h1 id="让Freenom相信你不是机器人"><a href="#让Freenom相信你不是机器人" class="headerlink" title="让Freenom相信你不是机器人"></a>让Freenom相信你不是机器人</h1><p>又一顿Bing，发现是我的IP和注册时的地址不对应。</p><p>没办法，只能听Freenom的。</p><p>弄个免费的也真难，害（；´д｀）ゞ</p><p>网上都是介绍用ipip.net去搜索梯子爬出去的IP。但是成功率不高而且每次都需要配置一番。</p><p>我找到了FireFox。</p><p>先下载一个FireFox。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y83yWt.png" alt="Y83yWt.png"></p><p>打开<code>附加组件</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y88pf1.png" alt="Y88pf1.png"></p><p>搜索<code>iGG谷歌访问助手</code>，并安装。<br>国内FireFox的速度还行。</p><p>然后爬这个助手的梯子，会发现你的IP根本没变就能很快访问Freenom。</p><p>然后，</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/05/10/Y88cN9.png" alt="Y88cN9.png"></p><p>把你的个人信息完善一下，只需要地址是真的即可。</p><p>再注册就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Freenom </tag>
            
            <tag> 免费域名申请 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>史上最好用的编辑器</title>
      <link href="/post/d87e.html"/>
      <url>/post/d87e.html</url>
      
        <content type="html"><![CDATA[<p>之前用win自带的<code>记事本</code>，功能太鸡肋了。啥都没有，而且最不能忍受的就是，微软的程序猿<del>自己认为</del>很聪明，给UTF-8加了BOM。</p><p>然后，许多代码出错emmm</p><p>直接上链接：<a href="npp.7.8.5.Installer.x64.exe">这里，v7.8.5_x64</a></p><p>附上哈希值，怕<code>CloudFlare</code>的<code>CDN</code>啥时候抽了，下载出错：</p><pre><code>CRC32: 80A1EBD6MD5: CD8C07848895C989C81C9D88C8BFEA88SHA-1: 820C75A6E7B5835AB01E45DE728AE3434500ABF5</code></pre><h1 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h1><p><a href="a.zip">Start Test</a></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NotePad++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>梯子</title>
      <link href="/post/c0a3.html"/>
      <url>/post/c0a3.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oops~,破解失败咯。" data-whm="Oops~,破解失败咯。">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请提供密码，拒绝暴力破解。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="8a332ea66811a209c180e3d41e30e67c08c71e26249ddbfb4e08fe2e8a683887">41a02563939bc8674c2e9567f0b7062c7367ec71b7b6e1fdacd0645e2d149fd09f4c51bbd6296024e52ae240cdb62fc3fbdf3690bb22e79d032522202fa75abcc45cc098445036d0139f1aa0904f3ed179a46b43a151d2721468c0bde9b46c04c1affd120829af56f1cf36a78aa5d1de7adb51221cdb44011c0ff4843992760d1c43c179bf93645c22f65373afa4b8a7a96df0443d601ee0408055d768025c53d8a7e8300cf2a5694716abf4321397cb3a48c86b1ee81dd4283f6208b391f21d53afd46406edd9ad99825d346f51f63ebbb98ee4aa04e8f381666aa0dca73e1639d81e89727b251ccbccd5b4cd4ba0c088ca58fd72b8c9bcef3a540e8f9e6c7fb699002805d550f2267c0b24b5b3d543888f728dbb39fd1ed5f958ac6800406cd4022cb00a3f0d3a44067e830794016e4010510f4bcdc63fc7bf47294d022b223dc81efd30af13bd99b2fd363b9f76fa4d1c3be1d09af6ff2852330847720beace853b9deec8d485811594395a3913113b016c3d22e5e29e7d124f1567861806f608259a4b30b733b83e06b94708397260ba2ed70e255d93b3cd2ec57b159ac6bbe21ed9d862f5924acc39cdc3c18f4b4f09d8ce793255c84d193937caed42844851af88d0d6406bbd2bd18c73092a7b4857510046fe1f4c3bb161f6695ac007311c442a4114ce39a0935901f1636cc843424e7b1540c2911463e7089843cd9331ef71d8a918b6e8694064f1ef342d7a4380a2447d41da8731f32f7f7145aaedc3c2727f0a952bbddcf821421d3a2b64f6d37d16103568bb84538cd32703144aeb089ba45be18be2cbb0f4f83ad029861bd134186b7b25148565f1d2a9b11a2c390b73fe08e5208c15f0a14738dc4573a271757464a43a453a69a6ee18e420703abb1212c7a093d8c7a256611060cf06d6138f841b4c414d9b132cbf31059eef0105bd853e283f7b603e4b5fa6b3b38cce306ec633c77d85a4ceb7510ad8a7df63fd3162ba3dce93e360f3e7cc342ceac716435a3ebed4cdcc95df348a26520de8ac5063850097a24fe019f95f52150f6d74b3e58f7ccc018e7015578398c254a27a0fcbb6f0c4c7d81e4831f6cfa4c04258421d93b19a78a079b15a0bfe264af9a6dd92c0d539ebd718acf0d11888bb089a4fc25efac29388c1bc92d78208aea9ef72f61f21521ab6986b7ba653ca4eafc78e991f371acfdfe8fceb5e6052f74c4e7d1666713b5d81adc71cb8a2137eb705f7461e042e3ef2cc5b8795fcca7984fee02330fd5f2f80b129f3ba9e23f75ddc57121cd0c38040d3e50f517e48f0ccca285cb247facc583269d76efde9bfcd2809930749436a34be358f99dba88d3162e49616d6abe001f863b68cafa2e2aef3f0f2e0ec4b144899dfc2968977ddc04690a424ee9677306e25b76d2149e5af5da6fbecebbceaa96368717965495a14abc233ad84ab56606f319bb86efd1b02dbe2044b1b7d65bef4b604b7bfd0642a293fba25635ab49ced54ebc77b355057fe07ff4845f809c0999cd9b9d942159c22b9d92759a4804a2262ecafed4af7ab27e24b7aa1c8451a014b824d1343334f9a550688b25278cb43e73fbc0eea20f7b75d90a6aac6883080913923fb90b7ad2db76710e48bdae6596e4dd2a2c02ccc07f511bb7ee89fe39856b0934ca0be04d864dab13cb0c85338e4cd9a6b4dd537652f8750ebf8c1e6483c46eb10ec5b43d9b3726ac139af3f34ea9043ed9da63a925940ed5f87d4acafa688111824e6e05c5eac774645ac8fda05637d369ac33caf8571e9002c4f426c2f3b4086625f6c1c1254e78649322f47e81b7e3be536046eed8222ae2a250ca48d74a05e17cecb4fc473808ee6d2c584001f452396a35cef58661932dc06f27837ac5110e855baead7caffdf52db1defc7e847282afa85b00e5e1bad011fbb50006be2b032c5c6b777cb0f671ab3a46cb6c76e0594570b604512da5836dfd0994fb640621e37ef2ea7140384b722f039ac103edb54d9c323adf2806fcd4f70139a8e5d38b37537c8da003f24776730ec2c7b9db1e77734cb91c2b2c510562da4c21080c56b0a09bbbb0f56071b48e9d9a248e914ea1e3671901372f5e077d7a9c0bf14508b01ccad5eefb76418566e692a9e35a083b3fe4bc9971253dfbb81c64f9d9be5649d73674d8b59b65110e269e742d7c91371e0cc9c7667881ff4be57a259f8556d8dd9c6a0839ad6ff86a135e5a1a08cb827afffddfbe755b3dd21a0b858523d33c8951fd214a107cb5c6e0b9d609ec1ca47e1096e46a7a5ac9ff2cf2f2978f1730f0ecac22ae2c38d11e292b0588d417f14a26391fe851764bacffa6c94687ce6a5b6f98c1360a65c5120b3c7ae897baad214e602b987ec03f5f0b88b56f6949711021411541e7cee134a09d3693f57cc6ea646ee6e95ee84d8fcad482fea85fc47397b7cff12ae8dfaf09c4627f10b9eba656fd6d6006e80acba730d060422ff51923156857c69239e4b329f6c4616de17dda5ca559a9681ca46da7bcc9face8c9b99c7319a7f5e3abe1aa6fb6abf4e0cd09f136149cbaa0ae90b9d5fa7d9b03d1d5d683ad94735f9fd1834f27492dc0d3c9b1a40e90b18a6acd9cf3bc632dbc049b64c843a96ed7faf384e1b12078a0fff47163a571f3cc6e8c2188c58268b173372c330f21114bae25e127b00c30169a5e0f16d62904950137471096ed2683802ecf29107882fac42bd4a4c5e318f29f8b2f24ae7dfa51b5d9c532161843310038ac01f26a4a1d38a4dce2e6ad855c064660c83eae4da7a5454e1305b1daebb5ad65f2cddf86464fee4887cbb7211f733ed66657ba232615ad8afdd21d4dc61d97614a90f03864d62659d222f364de35d0731c28546454833cca8bf643552ef1fd62260f8f716059b5e3e7c5e3ade18862c866d4dcc1081a2f80b831ffc84b1b9d8da1f69a7bd7086b9b6c15030a13322280bb910db3c0724f15c3c6b6faad6e27dbdf9638318c6d808f4877620b2c781f728ab2119fa3addae0cfc7cba3ec963db803d756c4886c6c2becc4576f2bf84b84d84a039f6f0a311410d11be79656d809be81410c89453fac46962ba68de1acad18dd79142816ff5ce47a89083acd75ff0e31e84d9b310c36f56416fcf036b4b6220a0ce6c8c7e62db1cd93471017b5f14a87dfa5e4eee2f309204b6d4b98da237d33521a2b2296816113b1579667e85731f0b8a990706080686cba6158d85c4ee38f75745ba7f419967054efc41da0146bf2bff7497a6dc44c98337d306f4fbba10c7754d7d204598e4a452044a2bd68dc0eed03ee554dc1c139cb3b27f6901e35a26e0a0f4575299a693d3816412d44bcb41108bca5de6156c17b0ca50b419df64bb8f16e7074423986c6225c3dcc394675acdf60172dcbc36ca989b90000ab0c34861f7bd644fae35e5063bbfdafb256000c7502d3b2de9ab6060e2546e815456c8eb5bf28cda326214c4761e7b54f0add6f57404b1ecfab4bf3e8f195c2d948b97ae86785de22bc0c5f2543648417eb21af50ed728e6bc28fb19f5025795eb8346fd66d08fe80c7c25290aa40098f5268415eb8ac8a5005fe77dc8fa47b1fe6a5e557fd2d7668605773b62c33ad223d4e0a7b28fec92dd8c148e7815318d84a4d38ccac70c0f33bd3dc4827214c4a1b5b12b977b17c156358b003a12c</script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 梯子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yellow Pages</title>
      <link href="/post/74f.html"/>
      <url>/post/74f.html</url>
      
        <content type="html"><![CDATA[<div id="hexo-blog-encrypt" data-wpm="Oops~,破解失败咯。" data-whm="Oops~,破解失败咯。">  <div class="hbe-input-container">  <input type="password" id="hbePass" placeholder="" />    <label for="hbePass">请提供密码，拒绝暴力破解。</label>    <div class="bottom-line"></div>  </div>  <script id="hbeData" type="hbeData" data-hmacdigest="41704dc3aad35324f6ad23004e1d6febe5ff0c02627acbe2c4f61cebebf7eee2"></script></div><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> Study </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一次使用GitHub+Hexo</title>
      <link href="/post/1583.html"/>
      <url>/post/1583.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>Git下载：<a href="https://tperch-my.sharepoint.com/personal/perch_tperch_onmicrosoft_com/_layouts/15/download.aspx?UniqueId=661c1b1d-3405-4e3b-812b-7ca0b8635ddd&Translate=false&tempauth=eyJ0eXAiOiJKV1QiLCJhbGciOiJub25lIn0.eyJhdWQiOiIwMDAwMDAwMy0wMDAwLTBmZjEtY2UwMC0wMDAwMDAwMDAwMDAvdHBlcmNoLW15LnNoYXJlcG9pbnQuY29tQDgzMTNlYTE3LTAzN2ItNDlkNS05NmU1LTJjNmZjY2FiZjg0ZiIsImlzcyI6IjAwMDAwMDAzLTAwMDAtMGZmMS1jZTAwLTAwMDAwMDAwMDAwMCIsIm5iZiI6IjE1OTIwNDY5NjYiLCJleHAiOiIxNTkyMDUwNTY2IiwiZW5kcG9pbnR1cmwiOiJ6OEFQY2ljdWdYb1FIZm5rTmZoZXV2cUhsTExheWI0ZWVqb0d1WEw5L2U0PSIsImVuZHBvaW50dXJsTGVuZ3RoIjoiMTU4IiwiaXNsb29wYmFjayI6IlRydWUiLCJjaWQiOiJNMlExTURJek9USXROalF6WXkwME5EazFMVGhtTnpZdFpUWmlPV1kyTkdKbU56VmwiLCJ2ZXIiOiJoYXNoZWRwcm9vZnRva2VuIiwic2l0ZWlkIjoiWldWak5UZGlZV0V0TURKaU55MDBaamczTFRrMVpERXROMkkzWTJGaE5tWmpZakZqIiwiYXBwX2Rpc3BsYXluYW1lIjoiQ2xvdWRyZXZlICIsImdpdmVuX25hbWUiOiLmoJYiLCJmYW1pbHlfbmFtZSI6IuaenSIsImFwcGlkIjoiZmU5NTU1MmQtMTA4OS00NzU4LTgyYzktYzJkNmU3MDM5ZTk3IiwidGlkIjoiODMxM2VhMTctMDM3Yi00OWQ1LTk2ZTUtMmM2ZmNjYWJmODRmIiwidXBuIjoicGVyY2hAdHBlcmNoLm9ubWljcm9zb2Z0LmNvbSIsInB1aWQiOiIxMDAzMjAwMEMwRUJGQjNBIiwiY2FjaGVrZXkiOiIwaC5mfG1lbWJlcnNoaXB8MTAwMzIwMDBjMGViZmIzYUBsaXZlLmNvbSIsInNjcCI6ImFsbGZpbGVzLndyaXRlIiwidHQiOiIyIiwidXNlUGVyc2lzdGVudENvb2tpZSI6bnVsbH0.bUZOeVhBWm1Rdk9BQi9PT1crTWd0SDdtN3pOUWp6NUVJTksvcFRqTEJVND0&ApiVersion=2.0" target="_blank" rel="noopener">传送门</a></p></blockquote><h1 id="以小白的眼光教你搭建Github-Hexo"><a href="#以小白的眼光教你搭建Github-Hexo" class="headerlink" title="以小白的眼光教你搭建Github+Hexo"></a>以小白的眼光教你搭建Github+Hexo</h1><p>   之前我接触过的博客程序，是用PHP的Wordpress。但是毕竟我是个初三学生，没法租服务器，也就放弃了搭建个人博客的想法。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1587307981577&di=cdea9fc487d45efc2eb125834b95f0c7&imgtype=0&src=http%3A%2F%2F5b0988e595225.cdn.sohucs.com%2Fq_70%2Cc_zoom%2Cw_640%2Fimages%2F20190809%2F0ce331bec58c4cbf823ac58f32fdbdb9.jpeg" alt="我太难了"></p><p>但是后来，我在知乎上遇到了一个大佬，和我一样呢，也是初三。推荐一下TA的博客吧，做个友链。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=3488729154,2763255392&fm=26&gp=0.jpg" alt="hh"></p><p>这是TA的Blog：</p><pre><code>https://blog.cyfan.top/ </code></pre><p>话不多说，直接讲怎么搭建Hexo。</p><h2 id="建立Github仓库"><a href="#建立Github仓库" class="headerlink" title="建立Github仓库"></a>建立Github仓库</h2><blockquote><p>注释：这个github仓库是用来放网站的！！！</p></blockquote><p>Github不用我多说，上官网 <a href="https://github.com" target="_blank" rel="noopener">https://github.com</a> .注册账号。英文不好的话emmm我也不能救你，用翻译软件吧。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="http://www.17qq.com/img_biaoqing/29545814.jpeg" alt="无能为力"></p><p>创建一个仓库，看图！！</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/19/JKOKfO.png" alt="创建仓库_1"></p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/19/JKObAx.png" alt="创建仓库_2"></p><p>这时候，你的仓库应该是这样的。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/25/JyCeJS.png" alt="仓库_1"></p><p>但这是我创建README.md文件后的样子，如果你没有创建README.md文件，那么你的仓库可能是这样的：</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/25/JyCmRg.png" alt="仓库_2"></p><p>不管怎样，都是对的。</p><p>然后，我们来创建Pages。</p><h2 id="创建Github-Pages"><a href="#创建Github-Pages" class="headerlink" title="创建Github Pages"></a>创建Github Pages</h2><p>在你的仓库上方，会有一个“Settings”按钮，点击它。</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/25/JyFKQe.png" alt="Settings"></p><p>往下翻，你会看到Github Pages栏，像下图一样：</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/25/JyFDwn.png" alt="Github Pages"></p><p>选择Choose a theme（翻译：选择一个主题），会出现以下界面：</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/25/JyEQL4.png" alt="Github Pages_2"></p><p>这样，会出现如下图所示的界面：</p><p><img src="https://cdn.jsdelivr.net/gh/henryhe613/pic/images/loading.gif" data-original="https://s1.ax1x.com/2020/04/25/JyV6HJ.png" alt="Github Pages_3"></p><p>现在可以暂时不用管Github了。</p>]]></content>
      
      
      <categories>
          
          <category> Computer Skills </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 博客 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
